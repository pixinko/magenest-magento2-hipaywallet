<?php

namespace Magenest\HipayWallet\Model;

use Magenest\HipayWallet\Helper\Constant;
use Magenest\HipayWallet\Helper\Helper;

class HipayWalletPayment extends \Magento\Payment\Model\Method\AbstractMethod
{
    const CODE = 'magenest_hipaywallet';

    protected $_code = self::CODE;
    protected $_isGateway = true;
    protected $_canRefund = true;
    protected $_canAuthorize = true;
    protected $_canCapture = true;
    protected $_canVoid = true;
    protected $_isInitializeNeeded = true;
    protected $_canRefundInvoicePartial = true;

    protected $hipayPostDataHelper;
    protected $hipayLogger;
    protected $orderSender;

    public function __construct(
        \Magento\Framework\Model\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory,
        \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory,
        \Magento\Payment\Helper\Data $paymentData,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Magento\Payment\Model\Method\Logger $logger,
        \Magenest\HipayWallet\Helper\HipayPostDataHelper $hipayPostDataHelper,
        \Magenest\HipayWallet\Helper\Logger $hipayLogger,
        \Magento\Sales\Model\Order\Email\Sender\OrderSender $orderSender,
        array $data = []
    ) {
        parent::__construct(
            $context,
            $registry,
            $extensionFactory,
            $customAttributeFactory,
            $paymentData,
            $scopeConfig,
            $logger,
            null,
            null,
            $data
        );
        $this->hipayPostDataHelper = $hipayPostDataHelper;
        $this->hipayLogger = $hipayLogger;
        $this->orderSender = $orderSender;
    }

    public function isAvailable(\Magento\Quote\Api\Data\CartInterface $quote = null)
    {
        return parent::isAvailable($quote); // TODO: Change the autogenerated stub
    }

    public function initialize($paymentAction, $stateObject)
    {
        /**
         * @var \Magento\Sales\Model\Order $order
         */
        $payment = $this->getInfoInstance();
        $order = $payment->getOrder();
        $order->setCanSendNewEmailFlag(false);
        $response = $this->hipayPostDataHelper->requestOrder($order);
        $this->hipayLogger->debug("start generate pay url");
        if (isset($response->generateResult) && ($response->generateResult->code == 0)) {
            $redirectUrl = $response->generateResult->redirectUrl;
            $payment->setAdditionalInformation("redirect_url", $redirectUrl);
            if (!!$redirectUrl) {
                $order->addStatusHistoryComment(__('The customer was redirected to HipayWallet Gateway'));
                $this->hipayLogger->debug("redirect to '" . $redirectUrl . "'");
                //$this->order($payment, $order->getBaseGrandTotal());
            } else {
                $this->hipayLogger->debug("redirecturl invalid. Msg: ");
                $this->hipayLogger->debug(var_export($response, true));
                throw new \Magento\Framework\Exception\LocalizedException(
                    __("Payment exception")
                );
            }
        } else {
            $this->hipayLogger->debug("error" . var_export($response, true));
            throw new \Magento\Framework\Exception\LocalizedException(
                __("Payment exception")
            );
        }

        return parent::initialize($paymentAction, $stateObject);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface|\Magento\Sales\Model\Order\Payment $payment
     * @param float $amount
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function authorize(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        $this->hipayLogger->debug("auth");
        $transId = $payment->getAdditionalInformation(Constant::ADDITIONAL_TRANS_ID);
        $this->hipayLogger->debug("transid: " . $transId);
        $payment->setTransactionId($transId);
        $payment->setParentTransactionId($transId);
        $payment->setTransactionId($transId);
        $payment->setCcTransId($transId);
        $payment->setLastTransId($transId);
        $payment->setIsTransactionClosed(0);
        $payment->setShouldCloseParentTransaction(0);
        $order = $payment->getOrder();
        $order->setCanSendNewEmailFlag(true);
        if ($order->getCanSendNewEmailFlag()) {
            try {
                $this->orderSender->send($order);
            } catch (\Exception $e) {
                $this->_logger->debug($e);
            }
        }

        return parent::authorize($payment, $amount); // TODO: Change the autogenerated stub
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface|\Magento\Sales\Model\Order\Payment $payment
     * @param float $amount
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function capture(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        /**
         * @var \Magento\Sales\Model\Order $order
         * @var \Magenest\HipayWallet\Helper\ConfigHelper $configHelper
         * @var \Magenest\HipayWallet\Model\Transaction $transactionModel
         * @var \Magenest\HipayWallet\Helper\Logger $logger
         * @var \Magento\Framework\Message\ManagerInterface $messageManager
         * @var \Magento\Framework\App\State $state
         */
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $logger = $objectManager->create("\\Magenest\\HipayWallet\\Helper\\Logger");
        $configHelper = $objectManager->create('\\Magenest\\HipayWallet\\Helper\\ConfigHelper');
        $messageManager = $objectManager->create("\\Magento\\Framework\\Message\\ManagerInterface");
        $state = $objectManager->get("\\Magento\\Framework\\App\\State");
        $order = $payment->getOrder();
        $orderId = $order->getIncrementId();
        $transactionId = $payment->getAdditionalInformation(Constant::ADDITIONAL_TRANS_ID);
        //this only working in admin side
        if ($state->getAreaCode() == 'adminhtml') {
            try {
                if (!$transactionId) {
                    throw new \Magento\Framework\Exception\LocalizedException(
                        __("Can not find the transaction id.")
                    );
                } else {
                    $logger->debug("Capture with orderid " . $orderId . " transid: " . $transactionId);

                    $url = $configHelper->getServiceUrl() . Constant::URL_TRANSACTION;
                    $client = new \Zend_Soap_Client($url, Helper::getSoapOption());
                    $result = $client->confirm(array(
                        'parameters' => array(
                            'transactionPublicId' => $transactionId,
                            'wsLogin' => $configHelper->getWsLogin(),
                            'wsPassword' => $configHelper->getWsPassword(),
                        )
                    ));
                    if (isset($result->confirmResult->code) && ($result->confirmResult->code == 0)) {
                        //capture ok
                        $payment->setTransactionId($transactionId);
                        $payment->setParentTransactionId($transactionId);
                        $payment->setIsTransactionClosed(0);
                        $messageManager->addSuccessMessage($result->confirmResult->description);
                    } else {
                        $logger->debug("capture error");
                        if (isset($result->confirmResult)) {
                            $logger->debug("data response: " . serialize($result->confirmResult));
                        }
                        $description = isset($result->confirmResult->description) ? $result->confirmResult->description : "";
                        //capture error
                        throw new \Magento\Framework\Exception\LocalizedException(
                            __('Capture fail: ' . $description)
                        );
                    }
                }
            } catch (\Exception $e) {
                throw new \Magento\Framework\Exception\LocalizedException(
                    __("Exception Error, msg: " . $e->getMessage())
                );
            }
        } else {
            $payment->setTransactionId($transactionId);
            $payment->setParentTransactionId($transactionId);
            $payment->setTransactionId($transactionId);
            $payment->setCcTransId($transactionId);
            $payment->setLastTransId($transactionId);
            $payment->setIsTransactionClosed(0);
            $payment->setShouldCloseParentTransaction(0);
        }
        $payment->setAdditionalInformation("is_capture", "1");

        return parent::capture($payment, $amount); // TODO: Change the autogenerated stub
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface|\Magento\Sales\Model\Order\Payment $payment
     * @param float $amount
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function refund(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        /**
         * @var \Magento\Sales\Model\Order $order
         * @var \Magenest\HipayWallet\Helper\ConfigHelper $configHelper
         * @var \Magenest\HipayWallet\Model\Transaction $transactionModel
         * @var \Magenest\HipayWallet\Helper\Logger $logger
         * @var \Magento\Framework\Message\ManagerInterface $messageManager
         */
        $order = $payment->getOrder();
        $orderId = $order->getIncrementId();
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $logger = $objectManager->create("\\Magenest\\HipayWallet\\Helper\\Logger");
        $configHelper = $objectManager->create('\\Magenest\\HipayWallet\\Helper\\ConfigHelper');
        $messageManager = $objectManager->create("\\Magento\\Framework\\Message\\ManagerInterface");
        try {
            $transactionId = $payment->getAdditionalInformation(Constant::ADDITIONAL_TRANS_ID);
            if (!$transactionId) {
                throw new \Magento\Framework\Exception\LocalizedException(
                    __("Can not find the transaction id.")
                );
            }
            $logger->debug("refund with orderid, transid: " . $orderId . " " . $transactionId);

            $url = $configHelper->getServiceUrl() . Constant::URL_REFUND;
            //$result = $this->refundToCard($url, $transactionId, $amount);
            $currencyCode = strtoupper($order->getBaseCurrencyCode());
            $refundAction = $this->getConfigData('refund_action');
            if ($refundAction == "account") {
                $result = $this->refundToAccount($url, $transactionId, $amount, $currencyCode);
            } else {
                $result = $this->refundToCard($url, $transactionId, $amount);
            }
            if (isset($result['code']) && ($result['code'] == 0)) {
                //refund ok
                $messageManager->addSuccessMessage($result['description']);
                $payment->setIsTransactionClosed(1);
            } else {
                $logger->debug("refund error");
                if (!!$result) {
                    $logger->debug("data response: " . serialize($result));
                }
                $description = isset($result['description']) ? $result['description'] : "";
                $messageManager->addErrorMessage($result['description']);
                //refund error
                throw new \Magento\Framework\Exception\LocalizedException(
                    __('Refund fail: ' . $description)
                );
            }
        } catch (\Exception $e) {
            throw new \Magento\Framework\Exception\LocalizedException(
                __("Exception Error, msg: " . $e->getMessage())
            );
        }

        return parent::refund($payment, $amount); // TODO: Change the autogenerated stub
    }

    /**
     * @param $urlClient
     * @param $transid
     * @param $amount
     * @return mixed
     */
    private function refundToCard($urlClient, $transid, $amount)
    {
        /**
         * @var \Magenest\HipayWallet\Helper\ConfigHelper $configHelper
         * @var \Magenest\HipayWallet\Helper\Logger $logger
         */
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $logger = $objectManager->create("\\Magenest\\HipayWallet\\Helper\\Logger");
        $configHelper = $objectManager->create('\\Magenest\\HipayWallet\\Helper\\ConfigHelper');
        try {
            $client = new \Zend_Soap_Client($urlClient, Helper::getSoapOption());
            $result = $client->card(array(
                'parameters' => array(
                    'transactionPublicId' => $transid,
                    'wsLogin' => $configHelper->getWsLogin(),
                    'wsPassword' => $configHelper->getWsPassword(),
                    'websiteId' => $configHelper->getWebsiteId(),
                    'amount' => $amount,
                )
            ));
            if (isset($result->cardResult)) {
                return [
                    'code' => isset($result->cardResult->code) ? $result->cardResult->code : "",
                    'description' => isset($result->cardResult->description) ? $result->cardResult->description : "",
                    'amount' => isset($result->cardResult->amount) ? $result->cardResult->amount : "",
                    'transactionPublicId' => isset($result->cardResult->transactionPublicId) ? $result->cardResult->transactionPublicId : "",
                ];
            } else {
                return false;
            }
        } catch (\Exception $e) {
            //soap error
            $logger->debug("soap exception, msg: " . $e->getMessage());

            return false;
        }
    }

    /**
     * @param $urlClient
     * @param $transid
     * @param $amount
     * @return mixed
     */
    private function refundToAccount($urlClient, $transid, $amount, $currency)
    {
        /** @var \Magenest\HipayWallet\Helper\ConfigHelper $configHelper */
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $logger = $objectManager->create("\\Magenest\\HipayWallet\\Helper\\Logger");
        $configHelper = $objectManager->create('\\Magenest\\HipayWallet\\Helper\\ConfigHelper');
        try {
            $client = new \Zend_Soap_Client($urlClient, Helper::getSoapOption());
            $result = $client->account(array(
                'parameters' => array(
                    'transactionPublicId' => $transid,
                    'wsLogin' => $configHelper->getWsLogin(),
                    'wsPassword' => $configHelper->getWsPassword(),
                    'websiteId' => $configHelper->getWebsiteId(),
                    'amount' => $amount,
                    'currency' => $currency
                )
            ));
            if (isset($result->accountResult)) {
                return [
                    'code' => isset($result->accountResult->code) ? $result->accountResult->code : "",
                    'description' => isset($result->accountResult->description) ? $result->accountResult->description : "",
                    'amount' => isset($result->accountResult->amount) ? $result->accountResult->amount : "",
                    'transactionPublicId' => isset($result->accountResult->transactionPublicId) ? $result->accountResult->transactionPublicId : "",
                    'currency' => isset($result->accountResult->currency) ? $result->accountResult->currency : "",
                ];
            } else {
                return false;
            }
        } catch (\Exception $e) {
            $logger->debug("soap exception, msg: " . $e->getMessage());

            return false;
        }
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface|\Magento\Sales\Model\Order\Payment $payment
     * @return $this
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function void(\Magento\Payment\Model\InfoInterface $payment)
    {
        $this->_logger->debug("void");
        $order = $payment->getOrder();
        $orderId = $order->getIncrementId();
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $logger = $objectManager->create("\\Magenest\\HipayWallet\\Helper\\Logger");
        $configHelper = $objectManager->create('\\Magenest\\HipayWallet\\Helper\\ConfigHelper');
        $messageManager = $objectManager->create("\\Magento\\Framework\\Message\\ManagerInterface");
        try {
            $transactionId = $payment->getLastTransId();
            $logger->debug("cancel payment with orderid, transid: " . $orderId . " " . $transactionId);

            $url = $configHelper->getServiceUrl() . Constant::URL_TRANSACTION;
            $client = new \Zend_Soap_Client($url, Helper::getSoapOption());
            $result = $client->cancel(array(
                'parameters' => array(
                    'transactionPublicId' => $transactionId,
                    'wsLogin' => $configHelper->getWsLogin(),
                    'wsPassword' => $configHelper->getWsPassword(),
                )
            ));
            if (isset($result->cancelResult->code) && ($result->cancelResult->code == 0)) {
                //void ok
                $payment->setIsTransactionClosed(1);
                $messageManager->addSuccessMessage($result->cancelResult->description);
            } else {
                $logger->debug("cancel error");
                if (isset($result->confirmResult)) {
                    $logger->debug("data response: " . serialize($result->cancelResult));
                }
                $description = isset($result->cancelResult->description) ? $result->cancelResult->description : "";
                $messageManager->addErrorMessage($description);
                //void error
                throw new \Magento\Framework\Exception\LocalizedException(
                    __('cancel fail: ' . $description)
                );
            }
        } catch (\Exception $e) {
            throw new \Magento\Framework\Exception\LocalizedException(
                __("Exception Error, msg: " . $e->getMessage())
            );
        }

        return parent::void($payment);
    }

    public function cancel(\Magento\Payment\Model\InfoInterface $payment)
    {
        $this->_logger->debug("cancel");
        $this->void($payment);

        return parent::cancel($payment);
    }
}
